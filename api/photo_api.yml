openapi: 3.0.3
info:
  title: AI Photo Search
  description: AI Photo Search application, built during the Cloud and Big Data course at Columbia University.
  version: 1.0.0
servers:
  - url: https://api.example.com/v1
paths:
  /search:
    get:
      summary: photo search method
      description: |
        This API takes in a search query as a query parameter and returns zero or more photos that match the search query.
      operationId: searchPhotos
      parameters:
        - in: query
          name: q
          required: true
          description: the string to be searched
          schema:
            type: string
      responses:
        '200':
          description: search results
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArrayOfPhotoInfo'
        '403':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /upload:
    post:
      summary: photo upload method
      description: |
        This API takes in the multi-part body sent to it (ex. a photo) and uploads it to an S3 bucket.
      operationId: uploadPhoto
      requestBody: 
        $ref: '#/components/requestBodies/PhotoUpload'
      responses:
        '200':
          description: S3 POST operation response
        '403':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
components:
  requestBodies:
    PhotoUpload:
      description: photo upload request body
      required: true
      content:
        multipart/form-data:
          schema:
            type: object
            properties:
              photoInfo:
                $ref: "#/components/schemas/PhotoInfo"
              photo:
                type: string
                format: binary
          encoding:
            photo:
              contentType: image/png, image/jpeg, image/jpg
  schemas:
    ArrayOfPhotoInfo:
      type: object
      properties:
        results:
          type: array
          items:
            $ref: '#/components/schemas/PhotoInfo'
    PhotoInfo:
      type: object
      properties:
        url:
          type: string
        labels:
          type: array
          items:
            type: string
    Error:
      type: object
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string