Resources:
  PythonLambdaLayerTierPythonLambdaLayerCoreEBDD0798:
    Type: AWS::Lambda::LayerVersion
    Properties:
      Content:
        S3Bucket: cdk-hnb659fds-assets-756059218166-us-east-1
        S3Key: de23efc62bf17849d8ea7bd5b1c7258ccf284796cab25f4a4576a09cbe3d007c.zip
      CompatibleRuntimes:
        - python3.9
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Metadata:
      aws:cdk:path: PhotoAlbumStack/PythonLambdaLayerTier/PythonLambdaLayerCore/Resource
      aws:asset:path: asset.de23efc62bf17849d8ea7bd5b1c7258ccf284796cab25f4a4576a09cbe3d007c
      aws:asset:is-bundled: false
      aws:asset:property: Content
  PhotoAlbumDataTierPhotoAlbumS3B365F39C:
    Type: AWS::S3::Bucket
    Properties:
      Tags:
        - Key: aws-cdk:auto-delete-objects
          Value: "true"
      VersioningConfiguration:
        Status: Enabled
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Metadata:
      aws:cdk:path: PhotoAlbumStack/PhotoAlbumDataTier/PhotoAlbumS3/Resource
  PhotoAlbumDataTierPhotoAlbumS3PolicyC8E94276:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket:
        Ref: PhotoAlbumDataTierPhotoAlbumS3B365F39C
      PolicyDocument:
        Statement:
          - Action:
              - s3:DeleteObject*
              - s3:GetBucket*
              - s3:List*
            Effect: Allow
            Principal:
              AWS:
                Fn::GetAtt:
                  - CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092
                  - Arn
            Resource:
              - Fn::GetAtt:
                  - PhotoAlbumDataTierPhotoAlbumS3B365F39C
                  - Arn
              - Fn::Join:
                  - ""
                  - - Fn::GetAtt:
                        - PhotoAlbumDataTierPhotoAlbumS3B365F39C
                        - Arn
                    - /*
          - Action:
              - s3:GetBucket*
              - s3:GetObject*
              - s3:List*
            Effect: Allow
            Principal:
              Service: rekognition.amazonaws.com
            Resource:
              - Fn::GetAtt:
                  - PhotoAlbumDataTierPhotoAlbumS3B365F39C
                  - Arn
              - Fn::Join:
                  - ""
                  - - Fn::GetAtt:
                        - PhotoAlbumDataTierPhotoAlbumS3B365F39C
                        - Arn
                    - /*
        Version: "2012-10-17"
    Metadata:
      aws:cdk:path: PhotoAlbumStack/PhotoAlbumDataTier/PhotoAlbumS3/Policy/Resource
  PhotoAlbumDataTierPhotoAlbumS3AutoDeleteObjectsCustomResourceAA900504:
    Type: Custom::S3AutoDeleteObjects
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - CustomS3AutoDeleteObjectsCustomResourceProviderHandler9D90184F
          - Arn
      BucketName:
        Ref: PhotoAlbumDataTierPhotoAlbumS3B365F39C
    DependsOn:
      - PhotoAlbumDataTierPhotoAlbumS3PolicyC8E94276
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Metadata:
      aws:cdk:path: PhotoAlbumStack/PhotoAlbumDataTier/PhotoAlbumS3/AutoDeleteObjectsCustomResource/Default
  PhotoAlbumDataTierPhotoAlbumS3NotificationsDE94FAF2:
    Type: Custom::S3BucketNotifications
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - BucketNotificationsHandler050a0587b7544547bf325f094a3db8347ECC3691
          - Arn
      BucketName:
        Ref: PhotoAlbumDataTierPhotoAlbumS3B365F39C
      NotificationConfiguration:
        LambdaFunctionConfigurations:
          - Events:
              - s3:ObjectCreated:*
            LambdaFunctionArn:
              Fn::GetAtt:
                - PhotoIndexServicePhotoAlbumIndexer1CF9FCF3
                - Arn
      Managed: true
    DependsOn:
      - PhotoAlbumDataTierPhotoAlbumS3AllowBucketNotificationsToPhotoAlbumStackPhotoIndexServicePhotoAlbumIndexer3A9528033913DF56
    Metadata:
      aws:cdk:path: PhotoAlbumStack/PhotoAlbumDataTier/PhotoAlbumS3/Notifications/Resource
  PhotoAlbumDataTierPhotoAlbumS3AllowBucketNotificationsToPhotoAlbumStackPhotoIndexServicePhotoAlbumIndexer3A9528033913DF56:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
          - PhotoIndexServicePhotoAlbumIndexer1CF9FCF3
          - Arn
      Principal: s3.amazonaws.com
      SourceAccount: "756059218166"
      SourceArn:
        Fn::GetAtt:
          - PhotoAlbumDataTierPhotoAlbumS3B365F39C
          - Arn
    Metadata:
      aws:cdk:path: PhotoAlbumStack/PhotoAlbumDataTier/PhotoAlbumS3/AllowBucketNotificationsToPhotoAlbumStackPhotoIndexServicePhotoAlbumIndexer3A952803
  PhotoAlbumDataTierPhotoAlbumOpenSearchA1E86EBA:
    Type: AWS::OpenSearchService::Domain
    Properties:
      ClusterConfig:
        DedicatedMasterEnabled: false
        InstanceCount: 1
        InstanceType: t3.small.search
        ZoneAwarenessEnabled: false
      DomainEndpointOptions:
        EnforceHTTPS: false
        TLSSecurityPolicy: Policy-Min-TLS-1-0-2019-07
      EBSOptions:
        EBSEnabled: true
        VolumeSize: 10
        VolumeType: gp2
      EncryptionAtRestOptions:
        Enabled: true
      EngineVersion: OpenSearch_1.3
      LogPublishingOptions: {}
      NodeToNodeEncryptionOptions:
        Enabled: true
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Metadata:
      aws:cdk:path: PhotoAlbumStack/PhotoAlbumDataTier/PhotoAlbumOpenSearch/Resource
  CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
      ManagedPolicyArns:
        - Fn::Sub: arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
    Metadata:
      aws:cdk:path: PhotoAlbumStack/Custom::S3AutoDeleteObjectsCustomResourceProvider/Role
  CustomS3AutoDeleteObjectsCustomResourceProviderHandler9D90184F:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: cdk-hnb659fds-assets-756059218166-us-east-1
        S3Key: 3f51abb709b8e65167a45aeed02bab11540603d909005d7148230ba5ce6c74d7.zip
      Timeout: 900
      MemorySize: 128
      Handler: __entrypoint__.handler
      Role:
        Fn::GetAtt:
          - CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092
          - Arn
      Runtime: nodejs14.x
      Description:
        Fn::Join:
          - ""
          - - "Lambda function for auto-deleting objects in "
            - Ref: PhotoAlbumDataTierPhotoAlbumS3B365F39C
            - " S3 bucket."
    DependsOn:
      - CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092
    Metadata:
      aws:cdk:path: PhotoAlbumStack/Custom::S3AutoDeleteObjectsCustomResourceProvider/Handler
      aws:asset:path: asset.3f51abb709b8e65167a45aeed02bab11540603d909005d7148230ba5ce6c74d7
      aws:asset:property: Code
  PhotoIndexServicePhotoAlbumCreateIndexServiceRoleF52D850C:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
    Metadata:
      aws:cdk:path: PhotoAlbumStack/PhotoIndexService/PhotoAlbumCreateIndex/ServiceRole/Resource
  PhotoIndexServicePhotoAlbumCreateIndexServiceRoleDefaultPolicyE17E236D:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - es:ESHttpDelete
              - es:ESHttpGet
              - es:ESHttpHead
              - es:ESHttpPatch
              - es:ESHttpPost
              - es:ESHttpPut
            Effect: Allow
            Resource:
              - Fn::GetAtt:
                  - PhotoAlbumDataTierPhotoAlbumOpenSearchA1E86EBA
                  - Arn
              - Fn::Join:
                  - ""
                  - - Fn::GetAtt:
                        - PhotoAlbumDataTierPhotoAlbumOpenSearchA1E86EBA
                        - Arn
                    - /*
        Version: "2012-10-17"
      PolicyName: PhotoIndexServicePhotoAlbumCreateIndexServiceRoleDefaultPolicyE17E236D
      Roles:
        - Ref: PhotoIndexServicePhotoAlbumCreateIndexServiceRoleF52D850C
    Metadata:
      aws:cdk:path: PhotoAlbumStack/PhotoIndexService/PhotoAlbumCreateIndex/ServiceRole/DefaultPolicy/Resource
  PhotoIndexServicePhotoAlbumCreateIndex8A39EF15:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: cdk-hnb659fds-assets-756059218166-us-east-1
        S3Key: f3c8eed25f5df1d90f0e893a6c9fac87718a82005757270198ee4fe539662976.zip
      Role:
        Fn::GetAtt:
          - PhotoIndexServicePhotoAlbumCreateIndexServiceRoleF52D850C
          - Arn
      Environment:
        Variables:
          OPENSEARCH_HOST:
            Fn::GetAtt:
              - PhotoAlbumDataTierPhotoAlbumOpenSearchA1E86EBA
              - DomainEndpoint
          OPENSEARCH_INDEX: photo-album-v1
      Handler: generate_photos_index.lambda_handler
      Layers:
        - Ref: PythonLambdaLayerTierPythonLambdaLayerCoreEBDD0798
      Runtime: python3.9
      Timeout: 10
    DependsOn:
      - PhotoIndexServicePhotoAlbumCreateIndexServiceRoleDefaultPolicyE17E236D
      - PhotoIndexServicePhotoAlbumCreateIndexServiceRoleF52D850C
    Metadata:
      aws:cdk:path: PhotoAlbumStack/PhotoIndexService/PhotoAlbumCreateIndex/Resource
      aws:asset:path: asset.f3c8eed25f5df1d90f0e893a6c9fac87718a82005757270198ee4fe539662976
      aws:asset:is-bundled: false
      aws:asset:property: Code
  PhotoIndexServicePhotoAlbumIndexerServiceRole28534A8C:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
    Metadata:
      aws:cdk:path: PhotoAlbumStack/PhotoIndexService/PhotoAlbumIndexer/ServiceRole/Resource
  PhotoIndexServicePhotoAlbumIndexerServiceRoleDefaultPolicy56EDB5CE:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - s3:GetBucket*
              - s3:GetObject*
              - s3:List*
            Effect: Allow
            Resource:
              - Fn::GetAtt:
                  - PhotoAlbumDataTierPhotoAlbumS3B365F39C
                  - Arn
              - Fn::Join:
                  - ""
                  - - Fn::GetAtt:
                        - PhotoAlbumDataTierPhotoAlbumS3B365F39C
                        - Arn
                    - /*
          - Action:
              - es:ESHttpDelete
              - es:ESHttpGet
              - es:ESHttpHead
              - es:ESHttpPatch
              - es:ESHttpPost
              - es:ESHttpPut
            Effect: Allow
            Resource:
              - Fn::GetAtt:
                  - PhotoAlbumDataTierPhotoAlbumOpenSearchA1E86EBA
                  - Arn
              - Fn::Join:
                  - ""
                  - - Fn::GetAtt:
                        - PhotoAlbumDataTierPhotoAlbumOpenSearchA1E86EBA
                        - Arn
                    - /*
          - Action: rekognition:DetectLabels
            Effect: Allow
            Resource: "*"
        Version: "2012-10-17"
      PolicyName: PhotoIndexServicePhotoAlbumIndexerServiceRoleDefaultPolicy56EDB5CE
      Roles:
        - Ref: PhotoIndexServicePhotoAlbumIndexerServiceRole28534A8C
    Metadata:
      aws:cdk:path: PhotoAlbumStack/PhotoIndexService/PhotoAlbumIndexer/ServiceRole/DefaultPolicy/Resource
  PhotoIndexServicePhotoAlbumIndexer1CF9FCF3:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: cdk-hnb659fds-assets-756059218166-us-east-1
        S3Key: f3c8eed25f5df1d90f0e893a6c9fac87718a82005757270198ee4fe539662976.zip
      Role:
        Fn::GetAtt:
          - PhotoIndexServicePhotoAlbumIndexerServiceRole28534A8C
          - Arn
      Environment:
        Variables:
          BUCKET:
            Ref: PhotoAlbumDataTierPhotoAlbumS3B365F39C
          OPENSEARCH_HOST:
            Fn::GetAtt:
              - PhotoAlbumDataTierPhotoAlbumOpenSearchA1E86EBA
              - DomainEndpoint
          OPENSEARCH_INDEX: photo-album-v1
      Handler: index_photos.lambda_handler
      Layers:
        - Ref: PythonLambdaLayerTierPythonLambdaLayerCoreEBDD0798
      Runtime: python3.9
      Timeout: 10
    DependsOn:
      - PhotoIndexServicePhotoAlbumIndexerServiceRoleDefaultPolicy56EDB5CE
      - PhotoIndexServicePhotoAlbumIndexerServiceRole28534A8C
    Metadata:
      aws:cdk:path: PhotoAlbumStack/PhotoIndexService/PhotoAlbumIndexer/Resource
      aws:asset:path: asset.f3c8eed25f5df1d90f0e893a6c9fac87718a82005757270198ee4fe539662976
      aws:asset:is-bundled: false
      aws:asset:property: Code
  PhotoIndexServicePhotoAlbumIndexerInvoke7Tjz5KX7GRQDyjRPBytArERKUwy73V0WhTiHDj2lAwECA071A1:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
          - PhotoIndexServicePhotoAlbumIndexer1CF9FCF3
          - Arn
      Principal: s3.amazonaws.com
    Metadata:
      aws:cdk:path: PhotoAlbumStack/PhotoIndexService/PhotoAlbumIndexer/Invoke7Tjz5KX7GRQDyjRPBytArERKUwy7+3V0WhTiHDj2lAw=
  BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
    Metadata:
      aws:cdk:path: PhotoAlbumStack/BucketNotificationsHandler050a0587b7544547bf325f094a3db834/Role/Resource
  BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action: s3:PutBucketNotification
            Effect: Allow
            Resource: "*"
        Version: "2012-10-17"
      PolicyName: BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36
      Roles:
        - Ref: BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC
    Metadata:
      aws:cdk:path: PhotoAlbumStack/BucketNotificationsHandler050a0587b7544547bf325f094a3db834/Role/DefaultPolicy/Resource
  BucketNotificationsHandler050a0587b7544547bf325f094a3db8347ECC3691:
    Type: AWS::Lambda::Function
    Properties:
      Description: AWS CloudFormation handler for "Custom::S3BucketNotifications" resources (@aws-cdk/aws-s3)
      Code:
        ZipFile: |
          import boto3  # type: ignore
          import json
          import logging
          import urllib.request

          s3 = boto3.client("s3")

          EVENTBRIDGE_CONFIGURATION = 'EventBridgeConfiguration'

          CONFIGURATION_TYPES = ["TopicConfigurations", "QueueConfigurations", "LambdaFunctionConfigurations"]

          def handler(event: dict, context):
            response_status = "SUCCESS"
            error_message = ""
            try:
              props = event["ResourceProperties"]
              bucket = props["BucketName"]
              notification_configuration = props["NotificationConfiguration"]
              request_type = event["RequestType"]
              managed = props.get('Managed', 'true').lower() == 'true'
              stack_id = event['StackId']

              if managed:
                config = handle_managed(request_type, notification_configuration)
              else:
                config = handle_unmanaged(bucket, stack_id, request_type, notification_configuration)

              put_bucket_notification_configuration(bucket, config)
            except Exception as e:
              logging.exception("Failed to put bucket notification configuration")
              response_status = "FAILED"
              error_message = f"Error: {str(e)}. "
            finally:
              submit_response(event, context, response_status, error_message)

          def handle_managed(request_type, notification_configuration):
            if request_type == 'Delete':
              return {}
            return notification_configuration

          def handle_unmanaged(bucket, stack_id, request_type, notification_configuration):
            external_notifications = find_external_notifications(bucket, stack_id)

            if request_type == 'Delete':
              return external_notifications

            def with_id(notification):
              notification['Id'] = f"{stack_id}-{hash(json.dumps(notification, sort_keys=True))}"
              return notification

            notifications = {}
            for t in CONFIGURATION_TYPES:
              external = external_notifications.get(t, [])
              incoming = [with_id(n) for n in notification_configuration.get(t, [])]
              notifications[t] = external + incoming

            if EVENTBRIDGE_CONFIGURATION in notification_configuration:
              notifications[EVENTBRIDGE_CONFIGURATION] = notification_configuration[EVENTBRIDGE_CONFIGURATION]
            elif EVENTBRIDGE_CONFIGURATION in external_notifications:
              notifications[EVENTBRIDGE_CONFIGURATION] = external_notifications[EVENTBRIDGE_CONFIGURATION]

            return notifications

          def find_external_notifications(bucket, stack_id):
            existing_notifications = get_bucket_notification_configuration(bucket)
            external_notifications = {}
            for t in CONFIGURATION_TYPES:
              external_notifications[t] = [n for n in existing_notifications.get(t, []) if not n['Id'].startswith(f"{stack_id}-")]

            if EVENTBRIDGE_CONFIGURATION in existing_notifications:
              external_notifications[EVENTBRIDGE_CONFIGURATION] = existing_notifications[EVENTBRIDGE_CONFIGURATION]

            return external_notifications

          def get_bucket_notification_configuration(bucket):
            return s3.get_bucket_notification_configuration(Bucket=bucket)

          def put_bucket_notification_configuration(bucket, notification_configuration):
            s3.put_bucket_notification_configuration(Bucket=bucket, NotificationConfiguration=notification_configuration)

          def submit_response(event: dict, context, response_status: str, error_message: str):
            response_body = json.dumps(
              {
                "Status": response_status,
                "Reason": f"{error_message}See the details in CloudWatch Log Stream: {context.log_stream_name}",
                "PhysicalResourceId": event.get("PhysicalResourceId") or event["LogicalResourceId"],
                "StackId": event["StackId"],
                "RequestId": event["RequestId"],
                "LogicalResourceId": event["LogicalResourceId"],
                "NoEcho": False,
              }
            ).encode("utf-8")
            headers = {"content-type": "", "content-length": str(len(response_body))}
            try:
              req = urllib.request.Request(url=event["ResponseURL"], headers=headers, data=response_body, method="PUT")
              with urllib.request.urlopen(req) as response:
                print(response.read().decode("utf-8"))
              print("Status code: " + response.reason)
            except Exception as e:
                print("send(..) failed executing request.urlopen(..): " + str(e))
      Handler: index.handler
      Role:
        Fn::GetAtt:
          - BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC
          - Arn
      Runtime: python3.7
      Timeout: 300
    DependsOn:
      - BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36
      - BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC
    Metadata:
      aws:cdk:path: PhotoAlbumStack/BucketNotificationsHandler050a0587b7544547bf325f094a3db834/Resource
  PhotoSearchServicePhotoAlbumSearcherServiceRoleE180B6BA:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
    Metadata:
      aws:cdk:path: PhotoAlbumStack/PhotoSearchService/PhotoAlbumSearcher/ServiceRole/Resource
  PhotoSearchServicePhotoAlbumSearcherServiceRoleDefaultPolicyA1EC6053:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - s3:Abort*
              - s3:DeleteObject*
              - s3:GetBucket*
              - s3:GetObject*
              - s3:List*
              - s3:PutObject
              - s3:PutObjectLegalHold
              - s3:PutObjectRetention
              - s3:PutObjectTagging
              - s3:PutObjectVersionTagging
            Effect: Allow
            Resource:
              - Fn::GetAtt:
                  - PhotoAlbumDataTierPhotoAlbumS3B365F39C
                  - Arn
              - Fn::Join:
                  - ""
                  - - Fn::GetAtt:
                        - PhotoAlbumDataTierPhotoAlbumS3B365F39C
                        - Arn
                    - /*
          - Action:
              - es:ESHttpDelete
              - es:ESHttpGet
              - es:ESHttpHead
              - es:ESHttpPatch
              - es:ESHttpPost
              - es:ESHttpPut
            Effect: Allow
            Resource:
              - Fn::GetAtt:
                  - PhotoAlbumDataTierPhotoAlbumOpenSearchA1E86EBA
                  - Arn
              - Fn::Join:
                  - ""
                  - - Fn::GetAtt:
                        - PhotoAlbumDataTierPhotoAlbumOpenSearchA1E86EBA
                        - Arn
                    - /*
          - Action: lex:RecognizeText
            Effect: Allow
            Resource:
              - arn:aws:lex:us-east-1:756059218166:bot-alias/UFYUFHDBYO/HE6YVHY5FC
              - arn:aws:lex:us-east-1:756059218166:bot/UFYUFHDBYO
        Version: "2012-10-17"
      PolicyName: PhotoSearchServicePhotoAlbumSearcherServiceRoleDefaultPolicyA1EC6053
      Roles:
        - Ref: PhotoSearchServicePhotoAlbumSearcherServiceRoleE180B6BA
    Metadata:
      aws:cdk:path: PhotoAlbumStack/PhotoSearchService/PhotoAlbumSearcher/ServiceRole/DefaultPolicy/Resource
  PhotoSearchServicePhotoAlbumSearcher8B9DCC3A:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: cdk-hnb659fds-assets-756059218166-us-east-1
        S3Key: d85fd532858b017be1366701a39e9a258873e47411bec8f9b0edd37424c11684.zip
      Role:
        Fn::GetAtt:
          - PhotoSearchServicePhotoAlbumSearcherServiceRoleE180B6BA
          - Arn
      Environment:
        Variables:
          BUCKET:
            Ref: PhotoAlbumDataTierPhotoAlbumS3B365F39C
          OPENSEARCH_HOST:
            Fn::GetAtt:
              - PhotoAlbumDataTierPhotoAlbumOpenSearchA1E86EBA
              - DomainEndpoint
          OPENSEARCH_INDEX: photo-album-v1
          LEX_BOT_ID: UFYUFHDBYO
          LEX_BOT_ALIAS_ID: HE6YVHY5FC
      Handler: search_photos.lambda_handler
      Layers:
        - Ref: PythonLambdaLayerTierPythonLambdaLayerCoreEBDD0798
      Runtime: python3.9
      Timeout: 10
    DependsOn:
      - PhotoSearchServicePhotoAlbumSearcherServiceRoleDefaultPolicyA1EC6053
      - PhotoSearchServicePhotoAlbumSearcherServiceRoleE180B6BA
    Metadata:
      aws:cdk:path: PhotoAlbumStack/PhotoSearchService/PhotoAlbumSearcher/Resource
      aws:asset:path: asset.d85fd532858b017be1366701a39e9a258873e47411bec8f9b0edd37424c11684
      aws:asset:is-bundled: false
      aws:asset:property: Code
  APIGatewayRole0A3D51E6:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: apigateway.amazonaws.com
        Version: "2012-10-17"
      RoleName: APIGatewayPhotoAlbumRole
    Metadata:
      aws:cdk:path: PhotoAlbumStack/APIGatewayRole/Resource
  APIGatewayRoleDefaultPolicyEA6238D4:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - s3:Abort*
              - s3:PutObject
              - s3:PutObjectLegalHold
              - s3:PutObjectRetention
              - s3:PutObjectTagging
              - s3:PutObjectVersionTagging
            Effect: Allow
            Resource:
              Fn::Join:
                - ""
                - - Fn::GetAtt:
                      - PhotoAlbumDataTierPhotoAlbumS3B365F39C
                      - Arn
                  - /*
          - Action: lambda:InvokeFunction
            Effect: Allow
            Resource:
              - Fn::GetAtt:
                  - PhotoSearchServicePhotoAlbumSearcher8B9DCC3A
                  - Arn
              - Fn::Join:
                  - ""
                  - - Fn::GetAtt:
                        - PhotoSearchServicePhotoAlbumSearcher8B9DCC3A
                        - Arn
                    - :*
        Version: "2012-10-17"
      PolicyName: APIGatewayRoleDefaultPolicyEA6238D4
      Roles:
        - Ref: APIGatewayRole0A3D51E6
    Metadata:
      aws:cdk:path: PhotoAlbumStack/APIGatewayRole/DefaultPolicy/Resource
  photoapi3D985D37:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Description: This service serves photos to clients
      Name: Photo Album Service
    Metadata:
      aws:cdk:path: PhotoAlbumStack/photo-api/Resource
  photoapiDeployment59D5FB13670bf113d3a5bb5d635ae137bc912364:
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId:
        Ref: photoapi3D985D37
      Description: This service serves photos to clients
    DependsOn:
      - photoapiErrorResponseModel545948DF
      - photoapiOPTIONSCB47188B
      - photoapisearchGETF64A6F4F
      - photoapisearch65D059F3
      - photoapiuploadPOSTD701EAE5
      - photoapiupload03CA0E22
      - photoapiPhoto618C9619
      - photoapiPhotoInfoArrayModel1B44F53E
      - photoapiPhotoInfoModelE0A6C00B
      - photoapiPhotoUploadModel6B229A5A
    Metadata:
      aws:cdk:path: PhotoAlbumStack/photo-api/Deployment/Resource
  photoapiDeploymentStagetestStageFE8E86C2:
    Type: AWS::ApiGateway::Stage
    Properties:
      RestApiId:
        Ref: photoapi3D985D37
      DeploymentId:
        Ref: photoapiDeployment59D5FB13670bf113d3a5bb5d635ae137bc912364
      StageName: testStage
    Metadata:
      aws:cdk:path: PhotoAlbumStack/photo-api/DeploymentStage.testStage/Resource
  photoapiOPTIONSCB47188B:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: OPTIONS
      ResourceId:
        Fn::GetAtt:
          - photoapi3D985D37
          - RootResourceId
      RestApiId:
        Ref: photoapi3D985D37
      AuthorizationType: NONE
      Integration:
        IntegrationResponses:
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET,PUT,POST,DELETE,PATCH,HEAD'"
            StatusCode: "204"
        RequestTemplates:
          application/json: "{ statusCode: 200 }"
        Type: MOCK
      MethodResponses:
        - ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Methods: true
          StatusCode: "204"
    Metadata:
      aws:cdk:path: PhotoAlbumStack/photo-api/Default/OPTIONS/Resource
  photoapisearch65D059F3:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId:
        Fn::GetAtt:
          - photoapi3D985D37
          - RootResourceId
      PathPart: search
      RestApiId:
        Ref: photoapi3D985D37
    Metadata:
      aws:cdk:path: PhotoAlbumStack/photo-api/Default/search/Resource
  photoapisearchGETApiPermissionPhotoAlbumStackphotoapiF7003816GETsearch2B74AFDF:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
          - PhotoSearchServicePhotoAlbumSearcher8B9DCC3A
          - Arn
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
          - ""
          - - "arn:aws:execute-api:us-east-1:756059218166:"
            - Ref: photoapi3D985D37
            - /
            - Ref: photoapiDeploymentStagetestStageFE8E86C2
            - /GET/search
    Metadata:
      aws:cdk:path: PhotoAlbumStack/photo-api/Default/search/GET/ApiPermission.PhotoAlbumStackphotoapiF7003816.GET..search
  photoapisearchGETApiPermissionTestPhotoAlbumStackphotoapiF7003816GETsearchD3AC0506:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
          - PhotoSearchServicePhotoAlbumSearcher8B9DCC3A
          - Arn
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
          - ""
          - - "arn:aws:execute-api:us-east-1:756059218166:"
            - Ref: photoapi3D985D37
            - /test-invoke-stage/GET/search
    Metadata:
      aws:cdk:path: PhotoAlbumStack/photo-api/Default/search/GET/ApiPermission.Test.PhotoAlbumStackphotoapiF7003816.GET..search
  photoapisearchGETF64A6F4F:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: GET
      ResourceId:
        Ref: photoapisearch65D059F3
      RestApiId:
        Ref: photoapi3D985D37
      AuthorizationType: NONE
      Integration:
        Credentials:
          Fn::GetAtt:
            - APIGatewayRole0A3D51E6
            - Arn
        IntegrationHttpMethod: POST
        RequestTemplates:
          application/json: '{ "statusCode": "200" }'
        Type: AWS_PROXY
        Uri:
          Fn::Join:
            - ""
            - - arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/
              - Fn::GetAtt:
                  - PhotoSearchServicePhotoAlbumSearcher8B9DCC3A
                  - Arn
              - /invocations
    Metadata:
      aws:cdk:path: PhotoAlbumStack/photo-api/Default/search/GET/Resource
  photoapiupload03CA0E22:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId:
        Fn::GetAtt:
          - photoapi3D985D37
          - RootResourceId
      PathPart: upload
      RestApiId:
        Ref: photoapi3D985D37
    Metadata:
      aws:cdk:path: PhotoAlbumStack/photo-api/Default/upload/Resource
  photoapiuploadPOSTD701EAE5:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: POST
      ResourceId:
        Ref: photoapiupload03CA0E22
      RestApiId:
        Ref: photoapi3D985D37
      AuthorizationType: NONE
      Integration:
        Credentials:
          Fn::GetAtt:
            - APIGatewayRole0A3D51E6
            - Arn
        IntegrationHttpMethod: POST
        Type: AWS
        Uri: arn:aws:apigateway:us-east-1:s3:path/{bucket}/{key}
    Metadata:
      aws:cdk:path: PhotoAlbumStack/photo-api/Default/upload/POST/Resource
  photoapiPhoto618C9619:
    Type: AWS::ApiGateway::Model
    Properties:
      RestApiId:
        Ref: photoapi3D985D37
      ContentType: image/*
      Name: Photo
      Schema:
        format: binary
        type: string
        $schema: http://json-schema.org/draft-04/schema#
    Metadata:
      aws:cdk:path: PhotoAlbumStack/photo-api/Photo/Resource
  photoapiPhotoInfoModelE0A6C00B:
    Type: AWS::ApiGateway::Model
    Properties:
      RestApiId:
        Ref: photoapi3D985D37
      ContentType: application/json
      Name: PhotoInfoModel
      Schema:
        properties:
          url:
            type: string
          labels:
            items:
              type: string
            type: array
        $schema: http://json-schema.org/draft-04/schema#
        title: photoInfo
        type: object
    Metadata:
      aws:cdk:path: PhotoAlbumStack/photo-api/PhotoInfoModel/Resource
  photoapiPhotoUploadModel6B229A5A:
    Type: AWS::ApiGateway::Model
    Properties:
      RestApiId:
        Ref: photoapi3D985D37
      ContentType: multipart/form-data
      Name: PhotoUploadModel
      Schema:
        properties:
          photoInfo:
            $ref:
              Ref:
                Ref: photoapiPhotoInfoModelE0A6C00B
          photo:
            $ref:
              Ref:
                Ref: photoapiPhoto618C9619
        $schema: http://json-schema.org/draft-04/schema#
        title: photoUpload
        type: object
    Metadata:
      aws:cdk:path: PhotoAlbumStack/photo-api/PhotoUploadModel/Resource
  photoapiPhotoInfoArrayModel1B44F53E:
    Type: AWS::ApiGateway::Model
    Properties:
      RestApiId:
        Ref: photoapi3D985D37
      ContentType: application/json
      Name: PhotoInfoArrayModel
      Schema:
        items:
          $ref:
            Ref:
              Ref: photoapiPhotoInfoModelE0A6C00B
        $schema: http://json-schema.org/draft-04/schema#
        title: photoArrayInfo
        type: array
    Metadata:
      aws:cdk:path: PhotoAlbumStack/photo-api/PhotoInfoArrayModel/Resource
  photoapiErrorResponseModel545948DF:
    Type: AWS::ApiGateway::Model
    Properties:
      RestApiId:
        Ref: photoapi3D985D37
      ContentType: application/json
      Name: ErrorResponseModel
      Schema:
        properties:
          state:
            type: string
          message:
            type: string
        $schema: http://json-schema.org/draft-04/schema#
        title: errorResponse
        type: object
    Metadata:
      aws:cdk:path: PhotoAlbumStack/photo-api/--ErrorResponseModel/Resource
  CDKMetadata:
    Type: AWS::CDK::Metadata
    Properties:
      Analytics: v2:deflate64:H4sIAAAAAAAA/22QT0/DMAzFP8vuaShMiPP+aCcmqiFxnbzUbGZNUsXJpqrqd6dJOg0QJ/+e/fKc5Ek+l7KcwZULVZ+Lhg6yf/egzmJs7fsG9KEG2b9Ch+4DHZM1YvVp/uoKnSZOahOM8lP7xoPg+R6Y0bNcxDJq2S+DOqNfAqPIGI9MlEtlG1LdvZ31IGyLhhGcOjG6CymU/dpqoLQ00yAItOx3tsHYTPUedwuClo7g8QrdaEX2i5aSe8I1to3tNJp0tR9q/KJjys0w+m1wCtNbtuhPto7DiW7TKTnz1tbYJFOEYRDpX2IcmaNYBfZW/3vw96hy9kI1umh5C74NfhBVN641D3P5WMqX2RcTFS4YTxrlLtdvFwipoPYBAAA=
    Metadata:
      aws:cdk:path: PhotoAlbumStack/CDKMetadata/Default
Outputs:
  photoapiEndpointC8589D95:
    Value:
      Fn::Join:
        - ""
        - - https://
          - Ref: photoapi3D985D37
          - .execute-api.us-east-1.
          - Ref: AWS::URLSuffix
          - /
          - Ref: photoapiDeploymentStagetestStageFE8E86C2
          - /
Parameters:
  BootstrapVersion:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /cdk-bootstrap/hnb659fds/version
    Description: Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]
Rules:
  CheckBootstrapVersion:
    Assertions:
      - Assert:
          Fn::Not:
            - Fn::Contains:
                - - "1"
                  - "2"
                  - "3"
                  - "4"
                  - "5"
                - Ref: BootstrapVersion
        AssertDescription: CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI.

